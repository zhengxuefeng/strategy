/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lsh.service.driver.recommend;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-28")
public class AddressItem implements org.apache.thrift.TBase<AddressItem, AddressItem._Fields>, java.io.Serializable, Cloneable, Comparable<AddressItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddressItem");

  private static final org.apache.thrift.protocol.TField ADDRESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("addressId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RESTRICT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("restrictNo", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LAT_FIELD_DESC = new org.apache.thrift.protocol.TField("lat", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LNG_FIELD_DESC = new org.apache.thrift.protocol.TField("lng", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AddressItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AddressItemTupleSchemeFactory());
  }

  public String addressId; // required
  public int restrictNo; // optional
  public String lat; // required
  public String lng; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ADDRESS_ID((short)1, "addressId"),
    RESTRICT_NO((short)2, "restrictNo"),
    LAT((short)3, "lat"),
    LNG((short)4, "lng");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ADDRESS_ID
          return ADDRESS_ID;
        case 2: // RESTRICT_NO
          return RESTRICT_NO;
        case 3: // LAT
          return LAT;
        case 4: // LNG
          return LNG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RESTRICTNO_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RESTRICT_NO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ADDRESS_ID, new org.apache.thrift.meta_data.FieldMetaData("addressId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESTRICT_NO, new org.apache.thrift.meta_data.FieldMetaData("restrictNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAT, new org.apache.thrift.meta_data.FieldMetaData("lat", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LNG, new org.apache.thrift.meta_data.FieldMetaData("lng", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddressItem.class, metaDataMap);
  }

  public AddressItem() {
  }

  public AddressItem(
    String addressId,
    String lat,
    String lng)
  {
    this();
    this.addressId = addressId;
    this.lat = lat;
    this.lng = lng;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AddressItem(AddressItem other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAddressId()) {
      this.addressId = other.addressId;
    }
    this.restrictNo = other.restrictNo;
    if (other.isSetLat()) {
      this.lat = other.lat;
    }
    if (other.isSetLng()) {
      this.lng = other.lng;
    }
  }

  public AddressItem deepCopy() {
    return new AddressItem(this);
  }

  @Override
  public void clear() {
    this.addressId = null;
    setRestrictNoIsSet(false);
    this.restrictNo = 0;
    this.lat = null;
    this.lng = null;
  }

  public String getAddressId() {
    return this.addressId;
  }

  public AddressItem setAddressId(String addressId) {
    this.addressId = addressId;
    return this;
  }

  public void unsetAddressId() {
    this.addressId = null;
  }

  /** Returns true if field addressId is set (has been assigned a value) and false otherwise */
  public boolean isSetAddressId() {
    return this.addressId != null;
  }

  public void setAddressIdIsSet(boolean value) {
    if (!value) {
      this.addressId = null;
    }
  }

  public int getRestrictNo() {
    return this.restrictNo;
  }

  public AddressItem setRestrictNo(int restrictNo) {
    this.restrictNo = restrictNo;
    setRestrictNoIsSet(true);
    return this;
  }

  public void unsetRestrictNo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESTRICTNO_ISSET_ID);
  }

  /** Returns true if field restrictNo is set (has been assigned a value) and false otherwise */
  public boolean isSetRestrictNo() {
    return EncodingUtils.testBit(__isset_bitfield, __RESTRICTNO_ISSET_ID);
  }

  public void setRestrictNoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESTRICTNO_ISSET_ID, value);
  }

  public String getLat() {
    return this.lat;
  }

  public AddressItem setLat(String lat) {
    this.lat = lat;
    return this;
  }

  public void unsetLat() {
    this.lat = null;
  }

  /** Returns true if field lat is set (has been assigned a value) and false otherwise */
  public boolean isSetLat() {
    return this.lat != null;
  }

  public void setLatIsSet(boolean value) {
    if (!value) {
      this.lat = null;
    }
  }

  public String getLng() {
    return this.lng;
  }

  public AddressItem setLng(String lng) {
    this.lng = lng;
    return this;
  }

  public void unsetLng() {
    this.lng = null;
  }

  /** Returns true if field lng is set (has been assigned a value) and false otherwise */
  public boolean isSetLng() {
    return this.lng != null;
  }

  public void setLngIsSet(boolean value) {
    if (!value) {
      this.lng = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ADDRESS_ID:
      if (value == null) {
        unsetAddressId();
      } else {
        setAddressId((String)value);
      }
      break;

    case RESTRICT_NO:
      if (value == null) {
        unsetRestrictNo();
      } else {
        setRestrictNo((Integer)value);
      }
      break;

    case LAT:
      if (value == null) {
        unsetLat();
      } else {
        setLat((String)value);
      }
      break;

    case LNG:
      if (value == null) {
        unsetLng();
      } else {
        setLng((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ADDRESS_ID:
      return getAddressId();

    case RESTRICT_NO:
      return getRestrictNo();

    case LAT:
      return getLat();

    case LNG:
      return getLng();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ADDRESS_ID:
      return isSetAddressId();
    case RESTRICT_NO:
      return isSetRestrictNo();
    case LAT:
      return isSetLat();
    case LNG:
      return isSetLng();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AddressItem)
      return this.equals((AddressItem)that);
    return false;
  }

  public boolean equals(AddressItem that) {
    if (that == null)
      return false;

    boolean this_present_addressId = true && this.isSetAddressId();
    boolean that_present_addressId = true && that.isSetAddressId();
    if (this_present_addressId || that_present_addressId) {
      if (!(this_present_addressId && that_present_addressId))
        return false;
      if (!this.addressId.equals(that.addressId))
        return false;
    }

    boolean this_present_restrictNo = true && this.isSetRestrictNo();
    boolean that_present_restrictNo = true && that.isSetRestrictNo();
    if (this_present_restrictNo || that_present_restrictNo) {
      if (!(this_present_restrictNo && that_present_restrictNo))
        return false;
      if (this.restrictNo != that.restrictNo)
        return false;
    }

    boolean this_present_lat = true && this.isSetLat();
    boolean that_present_lat = true && that.isSetLat();
    if (this_present_lat || that_present_lat) {
      if (!(this_present_lat && that_present_lat))
        return false;
      if (!this.lat.equals(that.lat))
        return false;
    }

    boolean this_present_lng = true && this.isSetLng();
    boolean that_present_lng = true && that.isSetLng();
    if (this_present_lng || that_present_lng) {
      if (!(this_present_lng && that_present_lng))
        return false;
      if (!this.lng.equals(that.lng))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_addressId = true && (isSetAddressId());
    list.add(present_addressId);
    if (present_addressId)
      list.add(addressId);

    boolean present_restrictNo = true && (isSetRestrictNo());
    list.add(present_restrictNo);
    if (present_restrictNo)
      list.add(restrictNo);

    boolean present_lat = true && (isSetLat());
    list.add(present_lat);
    if (present_lat)
      list.add(lat);

    boolean present_lng = true && (isSetLng());
    list.add(present_lng);
    if (present_lng)
      list.add(lng);

    return list.hashCode();
  }

  @Override
  public int compareTo(AddressItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAddressId()).compareTo(other.isSetAddressId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddressId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addressId, other.addressId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRestrictNo()).compareTo(other.isSetRestrictNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRestrictNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.restrictNo, other.restrictNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLat()).compareTo(other.isSetLat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lat, other.lat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLng()).compareTo(other.isSetLng());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLng()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lng, other.lng);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AddressItem(");
    boolean first = true;

    sb.append("addressId:");
    if (this.addressId == null) {
      sb.append("null");
    } else {
      sb.append(this.addressId);
    }
    first = false;
    if (isSetRestrictNo()) {
      if (!first) sb.append(", ");
      sb.append("restrictNo:");
      sb.append(this.restrictNo);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("lat:");
    if (this.lat == null) {
      sb.append("null");
    } else {
      sb.append(this.lat);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lng:");
    if (this.lng == null) {
      sb.append("null");
    } else {
      sb.append(this.lng);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (addressId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'addressId' was not present! Struct: " + toString());
    }
    if (lat == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lat' was not present! Struct: " + toString());
    }
    if (lng == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lng' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AddressItemStandardSchemeFactory implements SchemeFactory {
    public AddressItemStandardScheme getScheme() {
      return new AddressItemStandardScheme();
    }
  }

  private static class AddressItemStandardScheme extends StandardScheme<AddressItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AddressItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ADDRESS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.addressId = iprot.readString();
              struct.setAddressIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESTRICT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.restrictNo = iprot.readI32();
              struct.setRestrictNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lat = iprot.readString();
              struct.setLatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LNG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lng = iprot.readString();
              struct.setLngIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AddressItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.addressId != null) {
        oprot.writeFieldBegin(ADDRESS_ID_FIELD_DESC);
        oprot.writeString(struct.addressId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRestrictNo()) {
        oprot.writeFieldBegin(RESTRICT_NO_FIELD_DESC);
        oprot.writeI32(struct.restrictNo);
        oprot.writeFieldEnd();
      }
      if (struct.lat != null) {
        oprot.writeFieldBegin(LAT_FIELD_DESC);
        oprot.writeString(struct.lat);
        oprot.writeFieldEnd();
      }
      if (struct.lng != null) {
        oprot.writeFieldBegin(LNG_FIELD_DESC);
        oprot.writeString(struct.lng);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AddressItemTupleSchemeFactory implements SchemeFactory {
    public AddressItemTupleScheme getScheme() {
      return new AddressItemTupleScheme();
    }
  }

  private static class AddressItemTupleScheme extends TupleScheme<AddressItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AddressItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.addressId);
      oprot.writeString(struct.lat);
      oprot.writeString(struct.lng);
      BitSet optionals = new BitSet();
      if (struct.isSetRestrictNo()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetRestrictNo()) {
        oprot.writeI32(struct.restrictNo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AddressItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.addressId = iprot.readString();
      struct.setAddressIdIsSet(true);
      struct.lat = iprot.readString();
      struct.setLatIsSet(true);
      struct.lng = iprot.readString();
      struct.setLngIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.restrictNo = iprot.readI32();
        struct.setRestrictNoIsSet(true);
      }
    }
  }

}

