/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lsh.service.driver.recommend;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-28")
public class InputDriverRec implements org.apache.thrift.TBase<InputDriverRec, InputDriverRec._Fields>, java.io.Serializable, Cloneable, Comparable<InputDriverRec> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InputDriverRec");

  private static final org.apache.thrift.protocol.TField ADDRESS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("addressList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField DRIVER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("driverList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_BOX_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalBoxCount", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField WAREHOUSE_FIELD_DESC = new org.apache.thrift.protocol.TField("warehouse", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CAGE_CAR_FIELD_DESC = new org.apache.thrift.protocol.TField("cage_car", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SENT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("sentTime", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField LINE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("lineNumber", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField BOUND_LINE_DRIVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("boundLineDriverId", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new InputDriverRecStandardSchemeFactory());
    schemes.put(TupleScheme.class, new InputDriverRecTupleSchemeFactory());
  }

  public List<AddressItem> addressList; // required
  public List<DriverItem> driverList; // required
  public int totalBoxCount; // required
  public String warehouse; // required
  public int cage_car; // optional
  public int sentTime; // required
  public String lineNumber; // optional
  public String boundLineDriverId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ADDRESS_LIST((short)1, "addressList"),
    DRIVER_LIST((short)2, "driverList"),
    TOTAL_BOX_COUNT((short)3, "totalBoxCount"),
    WAREHOUSE((short)4, "warehouse"),
    CAGE_CAR((short)5, "cage_car"),
    SENT_TIME((short)6, "sentTime"),
    LINE_NUMBER((short)7, "lineNumber"),
    BOUND_LINE_DRIVER_ID((short)8, "boundLineDriverId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ADDRESS_LIST
          return ADDRESS_LIST;
        case 2: // DRIVER_LIST
          return DRIVER_LIST;
        case 3: // TOTAL_BOX_COUNT
          return TOTAL_BOX_COUNT;
        case 4: // WAREHOUSE
          return WAREHOUSE;
        case 5: // CAGE_CAR
          return CAGE_CAR;
        case 6: // SENT_TIME
          return SENT_TIME;
        case 7: // LINE_NUMBER
          return LINE_NUMBER;
        case 8: // BOUND_LINE_DRIVER_ID
          return BOUND_LINE_DRIVER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALBOXCOUNT_ISSET_ID = 0;
  private static final int __CAGE_CAR_ISSET_ID = 1;
  private static final int __SENTTIME_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CAGE_CAR,_Fields.LINE_NUMBER,_Fields.BOUND_LINE_DRIVER_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ADDRESS_LIST, new org.apache.thrift.meta_data.FieldMetaData("addressList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AddressItem.class))));
    tmpMap.put(_Fields.DRIVER_LIST, new org.apache.thrift.meta_data.FieldMetaData("driverList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DriverItem.class))));
    tmpMap.put(_Fields.TOTAL_BOX_COUNT, new org.apache.thrift.meta_data.FieldMetaData("totalBoxCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WAREHOUSE, new org.apache.thrift.meta_data.FieldMetaData("warehouse", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CAGE_CAR, new org.apache.thrift.meta_data.FieldMetaData("cage_car", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SENT_TIME, new org.apache.thrift.meta_data.FieldMetaData("sentTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LINE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("lineNumber", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BOUND_LINE_DRIVER_ID, new org.apache.thrift.meta_data.FieldMetaData("boundLineDriverId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InputDriverRec.class, metaDataMap);
  }

  public InputDriverRec() {
  }

  public InputDriverRec(
    List<AddressItem> addressList,
    List<DriverItem> driverList,
    int totalBoxCount,
    String warehouse,
    int sentTime)
  {
    this();
    this.addressList = addressList;
    this.driverList = driverList;
    this.totalBoxCount = totalBoxCount;
    setTotalBoxCountIsSet(true);
    this.warehouse = warehouse;
    this.sentTime = sentTime;
    setSentTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InputDriverRec(InputDriverRec other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAddressList()) {
      List<AddressItem> __this__addressList = new ArrayList<AddressItem>(other.addressList.size());
      for (AddressItem other_element : other.addressList) {
        __this__addressList.add(new AddressItem(other_element));
      }
      this.addressList = __this__addressList;
    }
    if (other.isSetDriverList()) {
      List<DriverItem> __this__driverList = new ArrayList<DriverItem>(other.driverList.size());
      for (DriverItem other_element : other.driverList) {
        __this__driverList.add(new DriverItem(other_element));
      }
      this.driverList = __this__driverList;
    }
    this.totalBoxCount = other.totalBoxCount;
    if (other.isSetWarehouse()) {
      this.warehouse = other.warehouse;
    }
    this.cage_car = other.cage_car;
    this.sentTime = other.sentTime;
    if (other.isSetLineNumber()) {
      this.lineNumber = other.lineNumber;
    }
    if (other.isSetBoundLineDriverId()) {
      this.boundLineDriverId = other.boundLineDriverId;
    }
  }

  public InputDriverRec deepCopy() {
    return new InputDriverRec(this);
  }

  @Override
  public void clear() {
    this.addressList = null;
    this.driverList = null;
    setTotalBoxCountIsSet(false);
    this.totalBoxCount = 0;
    this.warehouse = null;
    setCage_carIsSet(false);
    this.cage_car = 0;
    setSentTimeIsSet(false);
    this.sentTime = 0;
    this.lineNumber = null;
    this.boundLineDriverId = null;
  }

  public int getAddressListSize() {
    return (this.addressList == null) ? 0 : this.addressList.size();
  }

  public java.util.Iterator<AddressItem> getAddressListIterator() {
    return (this.addressList == null) ? null : this.addressList.iterator();
  }

  public void addToAddressList(AddressItem elem) {
    if (this.addressList == null) {
      this.addressList = new ArrayList<AddressItem>();
    }
    this.addressList.add(elem);
  }

  public List<AddressItem> getAddressList() {
    return this.addressList;
  }

  public InputDriverRec setAddressList(List<AddressItem> addressList) {
    this.addressList = addressList;
    return this;
  }

  public void unsetAddressList() {
    this.addressList = null;
  }

  /** Returns true if field addressList is set (has been assigned a value) and false otherwise */
  public boolean isSetAddressList() {
    return this.addressList != null;
  }

  public void setAddressListIsSet(boolean value) {
    if (!value) {
      this.addressList = null;
    }
  }

  public int getDriverListSize() {
    return (this.driverList == null) ? 0 : this.driverList.size();
  }

  public java.util.Iterator<DriverItem> getDriverListIterator() {
    return (this.driverList == null) ? null : this.driverList.iterator();
  }

  public void addToDriverList(DriverItem elem) {
    if (this.driverList == null) {
      this.driverList = new ArrayList<DriverItem>();
    }
    this.driverList.add(elem);
  }

  public List<DriverItem> getDriverList() {
    return this.driverList;
  }

  public InputDriverRec setDriverList(List<DriverItem> driverList) {
    this.driverList = driverList;
    return this;
  }

  public void unsetDriverList() {
    this.driverList = null;
  }

  /** Returns true if field driverList is set (has been assigned a value) and false otherwise */
  public boolean isSetDriverList() {
    return this.driverList != null;
  }

  public void setDriverListIsSet(boolean value) {
    if (!value) {
      this.driverList = null;
    }
  }

  public int getTotalBoxCount() {
    return this.totalBoxCount;
  }

  public InputDriverRec setTotalBoxCount(int totalBoxCount) {
    this.totalBoxCount = totalBoxCount;
    setTotalBoxCountIsSet(true);
    return this;
  }

  public void unsetTotalBoxCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALBOXCOUNT_ISSET_ID);
  }

  /** Returns true if field totalBoxCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalBoxCount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALBOXCOUNT_ISSET_ID);
  }

  public void setTotalBoxCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALBOXCOUNT_ISSET_ID, value);
  }

  public String getWarehouse() {
    return this.warehouse;
  }

  public InputDriverRec setWarehouse(String warehouse) {
    this.warehouse = warehouse;
    return this;
  }

  public void unsetWarehouse() {
    this.warehouse = null;
  }

  /** Returns true if field warehouse is set (has been assigned a value) and false otherwise */
  public boolean isSetWarehouse() {
    return this.warehouse != null;
  }

  public void setWarehouseIsSet(boolean value) {
    if (!value) {
      this.warehouse = null;
    }
  }

  public int getCage_car() {
    return this.cage_car;
  }

  public InputDriverRec setCage_car(int cage_car) {
    this.cage_car = cage_car;
    setCage_carIsSet(true);
    return this;
  }

  public void unsetCage_car() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CAGE_CAR_ISSET_ID);
  }

  /** Returns true if field cage_car is set (has been assigned a value) and false otherwise */
  public boolean isSetCage_car() {
    return EncodingUtils.testBit(__isset_bitfield, __CAGE_CAR_ISSET_ID);
  }

  public void setCage_carIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CAGE_CAR_ISSET_ID, value);
  }

  public int getSentTime() {
    return this.sentTime;
  }

  public InputDriverRec setSentTime(int sentTime) {
    this.sentTime = sentTime;
    setSentTimeIsSet(true);
    return this;
  }

  public void unsetSentTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENTTIME_ISSET_ID);
  }

  /** Returns true if field sentTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSentTime() {
    return EncodingUtils.testBit(__isset_bitfield, __SENTTIME_ISSET_ID);
  }

  public void setSentTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENTTIME_ISSET_ID, value);
  }

  public String getLineNumber() {
    return this.lineNumber;
  }

  public InputDriverRec setLineNumber(String lineNumber) {
    this.lineNumber = lineNumber;
    return this;
  }

  public void unsetLineNumber() {
    this.lineNumber = null;
  }

  /** Returns true if field lineNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetLineNumber() {
    return this.lineNumber != null;
  }

  public void setLineNumberIsSet(boolean value) {
    if (!value) {
      this.lineNumber = null;
    }
  }

  public String getBoundLineDriverId() {
    return this.boundLineDriverId;
  }

  public InputDriverRec setBoundLineDriverId(String boundLineDriverId) {
    this.boundLineDriverId = boundLineDriverId;
    return this;
  }

  public void unsetBoundLineDriverId() {
    this.boundLineDriverId = null;
  }

  /** Returns true if field boundLineDriverId is set (has been assigned a value) and false otherwise */
  public boolean isSetBoundLineDriverId() {
    return this.boundLineDriverId != null;
  }

  public void setBoundLineDriverIdIsSet(boolean value) {
    if (!value) {
      this.boundLineDriverId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ADDRESS_LIST:
      if (value == null) {
        unsetAddressList();
      } else {
        setAddressList((List<AddressItem>)value);
      }
      break;

    case DRIVER_LIST:
      if (value == null) {
        unsetDriverList();
      } else {
        setDriverList((List<DriverItem>)value);
      }
      break;

    case TOTAL_BOX_COUNT:
      if (value == null) {
        unsetTotalBoxCount();
      } else {
        setTotalBoxCount((Integer)value);
      }
      break;

    case WAREHOUSE:
      if (value == null) {
        unsetWarehouse();
      } else {
        setWarehouse((String)value);
      }
      break;

    case CAGE_CAR:
      if (value == null) {
        unsetCage_car();
      } else {
        setCage_car((Integer)value);
      }
      break;

    case SENT_TIME:
      if (value == null) {
        unsetSentTime();
      } else {
        setSentTime((Integer)value);
      }
      break;

    case LINE_NUMBER:
      if (value == null) {
        unsetLineNumber();
      } else {
        setLineNumber((String)value);
      }
      break;

    case BOUND_LINE_DRIVER_ID:
      if (value == null) {
        unsetBoundLineDriverId();
      } else {
        setBoundLineDriverId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ADDRESS_LIST:
      return getAddressList();

    case DRIVER_LIST:
      return getDriverList();

    case TOTAL_BOX_COUNT:
      return getTotalBoxCount();

    case WAREHOUSE:
      return getWarehouse();

    case CAGE_CAR:
      return getCage_car();

    case SENT_TIME:
      return getSentTime();

    case LINE_NUMBER:
      return getLineNumber();

    case BOUND_LINE_DRIVER_ID:
      return getBoundLineDriverId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ADDRESS_LIST:
      return isSetAddressList();
    case DRIVER_LIST:
      return isSetDriverList();
    case TOTAL_BOX_COUNT:
      return isSetTotalBoxCount();
    case WAREHOUSE:
      return isSetWarehouse();
    case CAGE_CAR:
      return isSetCage_car();
    case SENT_TIME:
      return isSetSentTime();
    case LINE_NUMBER:
      return isSetLineNumber();
    case BOUND_LINE_DRIVER_ID:
      return isSetBoundLineDriverId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof InputDriverRec)
      return this.equals((InputDriverRec)that);
    return false;
  }

  public boolean equals(InputDriverRec that) {
    if (that == null)
      return false;

    boolean this_present_addressList = true && this.isSetAddressList();
    boolean that_present_addressList = true && that.isSetAddressList();
    if (this_present_addressList || that_present_addressList) {
      if (!(this_present_addressList && that_present_addressList))
        return false;
      if (!this.addressList.equals(that.addressList))
        return false;
    }

    boolean this_present_driverList = true && this.isSetDriverList();
    boolean that_present_driverList = true && that.isSetDriverList();
    if (this_present_driverList || that_present_driverList) {
      if (!(this_present_driverList && that_present_driverList))
        return false;
      if (!this.driverList.equals(that.driverList))
        return false;
    }

    boolean this_present_totalBoxCount = true;
    boolean that_present_totalBoxCount = true;
    if (this_present_totalBoxCount || that_present_totalBoxCount) {
      if (!(this_present_totalBoxCount && that_present_totalBoxCount))
        return false;
      if (this.totalBoxCount != that.totalBoxCount)
        return false;
    }

    boolean this_present_warehouse = true && this.isSetWarehouse();
    boolean that_present_warehouse = true && that.isSetWarehouse();
    if (this_present_warehouse || that_present_warehouse) {
      if (!(this_present_warehouse && that_present_warehouse))
        return false;
      if (!this.warehouse.equals(that.warehouse))
        return false;
    }

    boolean this_present_cage_car = true && this.isSetCage_car();
    boolean that_present_cage_car = true && that.isSetCage_car();
    if (this_present_cage_car || that_present_cage_car) {
      if (!(this_present_cage_car && that_present_cage_car))
        return false;
      if (this.cage_car != that.cage_car)
        return false;
    }

    boolean this_present_sentTime = true;
    boolean that_present_sentTime = true;
    if (this_present_sentTime || that_present_sentTime) {
      if (!(this_present_sentTime && that_present_sentTime))
        return false;
      if (this.sentTime != that.sentTime)
        return false;
    }

    boolean this_present_lineNumber = true && this.isSetLineNumber();
    boolean that_present_lineNumber = true && that.isSetLineNumber();
    if (this_present_lineNumber || that_present_lineNumber) {
      if (!(this_present_lineNumber && that_present_lineNumber))
        return false;
      if (!this.lineNumber.equals(that.lineNumber))
        return false;
    }

    boolean this_present_boundLineDriverId = true && this.isSetBoundLineDriverId();
    boolean that_present_boundLineDriverId = true && that.isSetBoundLineDriverId();
    if (this_present_boundLineDriverId || that_present_boundLineDriverId) {
      if (!(this_present_boundLineDriverId && that_present_boundLineDriverId))
        return false;
      if (!this.boundLineDriverId.equals(that.boundLineDriverId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_addressList = true && (isSetAddressList());
    list.add(present_addressList);
    if (present_addressList)
      list.add(addressList);

    boolean present_driverList = true && (isSetDriverList());
    list.add(present_driverList);
    if (present_driverList)
      list.add(driverList);

    boolean present_totalBoxCount = true;
    list.add(present_totalBoxCount);
    if (present_totalBoxCount)
      list.add(totalBoxCount);

    boolean present_warehouse = true && (isSetWarehouse());
    list.add(present_warehouse);
    if (present_warehouse)
      list.add(warehouse);

    boolean present_cage_car = true && (isSetCage_car());
    list.add(present_cage_car);
    if (present_cage_car)
      list.add(cage_car);

    boolean present_sentTime = true;
    list.add(present_sentTime);
    if (present_sentTime)
      list.add(sentTime);

    boolean present_lineNumber = true && (isSetLineNumber());
    list.add(present_lineNumber);
    if (present_lineNumber)
      list.add(lineNumber);

    boolean present_boundLineDriverId = true && (isSetBoundLineDriverId());
    list.add(present_boundLineDriverId);
    if (present_boundLineDriverId)
      list.add(boundLineDriverId);

    return list.hashCode();
  }

  @Override
  public int compareTo(InputDriverRec other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAddressList()).compareTo(other.isSetAddressList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddressList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addressList, other.addressList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDriverList()).compareTo(other.isSetDriverList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDriverList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.driverList, other.driverList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalBoxCount()).compareTo(other.isSetTotalBoxCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalBoxCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalBoxCount, other.totalBoxCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWarehouse()).compareTo(other.isSetWarehouse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWarehouse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.warehouse, other.warehouse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCage_car()).compareTo(other.isSetCage_car());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCage_car()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cage_car, other.cage_car);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSentTime()).compareTo(other.isSetSentTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSentTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sentTime, other.sentTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLineNumber()).compareTo(other.isSetLineNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLineNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lineNumber, other.lineNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBoundLineDriverId()).compareTo(other.isSetBoundLineDriverId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoundLineDriverId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boundLineDriverId, other.boundLineDriverId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("InputDriverRec(");
    boolean first = true;

    sb.append("addressList:");
    if (this.addressList == null) {
      sb.append("null");
    } else {
      sb.append(this.addressList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("driverList:");
    if (this.driverList == null) {
      sb.append("null");
    } else {
      sb.append(this.driverList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalBoxCount:");
    sb.append(this.totalBoxCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("warehouse:");
    if (this.warehouse == null) {
      sb.append("null");
    } else {
      sb.append(this.warehouse);
    }
    first = false;
    if (isSetCage_car()) {
      if (!first) sb.append(", ");
      sb.append("cage_car:");
      sb.append(this.cage_car);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("sentTime:");
    sb.append(this.sentTime);
    first = false;
    if (isSetLineNumber()) {
      if (!first) sb.append(", ");
      sb.append("lineNumber:");
      if (this.lineNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.lineNumber);
      }
      first = false;
    }
    if (isSetBoundLineDriverId()) {
      if (!first) sb.append(", ");
      sb.append("boundLineDriverId:");
      if (this.boundLineDriverId == null) {
        sb.append("null");
      } else {
        sb.append(this.boundLineDriverId);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (addressList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'addressList' was not present! Struct: " + toString());
    }
    if (driverList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'driverList' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'totalBoxCount' because it's a primitive and you chose the non-beans generator.
    if (warehouse == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'warehouse' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'sentTime' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InputDriverRecStandardSchemeFactory implements SchemeFactory {
    public InputDriverRecStandardScheme getScheme() {
      return new InputDriverRecStandardScheme();
    }
  }

  private static class InputDriverRecStandardScheme extends StandardScheme<InputDriverRec> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, InputDriverRec struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ADDRESS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.addressList = new ArrayList<AddressItem>(_list0.size);
                AddressItem _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new AddressItem();
                  _elem1.read(iprot);
                  struct.addressList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setAddressListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DRIVER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.driverList = new ArrayList<DriverItem>(_list3.size);
                DriverItem _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new DriverItem();
                  _elem4.read(iprot);
                  struct.driverList.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setDriverListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_BOX_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalBoxCount = iprot.readI32();
              struct.setTotalBoxCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WAREHOUSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.warehouse = iprot.readString();
              struct.setWarehouseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CAGE_CAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cage_car = iprot.readI32();
              struct.setCage_carIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SENT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sentTime = iprot.readI32();
              struct.setSentTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LINE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lineNumber = iprot.readString();
              struct.setLineNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BOUND_LINE_DRIVER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.boundLineDriverId = iprot.readString();
              struct.setBoundLineDriverIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTotalBoxCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalBoxCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSentTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sentTime' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, InputDriverRec struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.addressList != null) {
        oprot.writeFieldBegin(ADDRESS_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.addressList.size()));
          for (AddressItem _iter6 : struct.addressList)
          {
            _iter6.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.driverList != null) {
        oprot.writeFieldBegin(DRIVER_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.driverList.size()));
          for (DriverItem _iter7 : struct.driverList)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_BOX_COUNT_FIELD_DESC);
      oprot.writeI32(struct.totalBoxCount);
      oprot.writeFieldEnd();
      if (struct.warehouse != null) {
        oprot.writeFieldBegin(WAREHOUSE_FIELD_DESC);
        oprot.writeString(struct.warehouse);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCage_car()) {
        oprot.writeFieldBegin(CAGE_CAR_FIELD_DESC);
        oprot.writeI32(struct.cage_car);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SENT_TIME_FIELD_DESC);
      oprot.writeI32(struct.sentTime);
      oprot.writeFieldEnd();
      if (struct.lineNumber != null) {
        if (struct.isSetLineNumber()) {
          oprot.writeFieldBegin(LINE_NUMBER_FIELD_DESC);
          oprot.writeString(struct.lineNumber);
          oprot.writeFieldEnd();
        }
      }
      if (struct.boundLineDriverId != null) {
        if (struct.isSetBoundLineDriverId()) {
          oprot.writeFieldBegin(BOUND_LINE_DRIVER_ID_FIELD_DESC);
          oprot.writeString(struct.boundLineDriverId);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InputDriverRecTupleSchemeFactory implements SchemeFactory {
    public InputDriverRecTupleScheme getScheme() {
      return new InputDriverRecTupleScheme();
    }
  }

  private static class InputDriverRecTupleScheme extends TupleScheme<InputDriverRec> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, InputDriverRec struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.addressList.size());
        for (AddressItem _iter8 : struct.addressList)
        {
          _iter8.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.driverList.size());
        for (DriverItem _iter9 : struct.driverList)
        {
          _iter9.write(oprot);
        }
      }
      oprot.writeI32(struct.totalBoxCount);
      oprot.writeString(struct.warehouse);
      oprot.writeI32(struct.sentTime);
      BitSet optionals = new BitSet();
      if (struct.isSetCage_car()) {
        optionals.set(0);
      }
      if (struct.isSetLineNumber()) {
        optionals.set(1);
      }
      if (struct.isSetBoundLineDriverId()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetCage_car()) {
        oprot.writeI32(struct.cage_car);
      }
      if (struct.isSetLineNumber()) {
        oprot.writeString(struct.lineNumber);
      }
      if (struct.isSetBoundLineDriverId()) {
        oprot.writeString(struct.boundLineDriverId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, InputDriverRec struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.addressList = new ArrayList<AddressItem>(_list10.size);
        AddressItem _elem11;
        for (int _i12 = 0; _i12 < _list10.size; ++_i12)
        {
          _elem11 = new AddressItem();
          _elem11.read(iprot);
          struct.addressList.add(_elem11);
        }
      }
      struct.setAddressListIsSet(true);
      {
        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.driverList = new ArrayList<DriverItem>(_list13.size);
        DriverItem _elem14;
        for (int _i15 = 0; _i15 < _list13.size; ++_i15)
        {
          _elem14 = new DriverItem();
          _elem14.read(iprot);
          struct.driverList.add(_elem14);
        }
      }
      struct.setDriverListIsSet(true);
      struct.totalBoxCount = iprot.readI32();
      struct.setTotalBoxCountIsSet(true);
      struct.warehouse = iprot.readString();
      struct.setWarehouseIsSet(true);
      struct.sentTime = iprot.readI32();
      struct.setSentTimeIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.cage_car = iprot.readI32();
        struct.setCage_carIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lineNumber = iprot.readString();
        struct.setLineNumberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.boundLineDriverId = iprot.readString();
        struct.setBoundLineDriverIdIsSet(true);
      }
    }
  }

}

