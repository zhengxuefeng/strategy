<?php
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class AddressItem {
  static $_TSPEC;

  /**
   * @var string
   */
  public $addressId = null;
  /**
   * @var int
   */
  public $restrictNo = null;
  /**
   * @var string
   */
  public $lat = null;
  /**
   * @var string
   */
  public $lng = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'addressId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'restrictNo',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'lat',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'lng',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['addressId'])) {
        $this->addressId = $vals['addressId'];
      }
      if (isset($vals['restrictNo'])) {
        $this->restrictNo = $vals['restrictNo'];
      }
      if (isset($vals['lat'])) {
        $this->lat = $vals['lat'];
      }
      if (isset($vals['lng'])) {
        $this->lng = $vals['lng'];
      }
    }
  }

  public function getName() {
    return 'AddressItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->addressId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->restrictNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lat);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lng);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AddressItem');
    if ($this->addressId !== null) {
      $xfer += $output->writeFieldBegin('addressId', TType::STRING, 1);
      $xfer += $output->writeString($this->addressId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->restrictNo !== null) {
      $xfer += $output->writeFieldBegin('restrictNo', TType::I32, 2);
      $xfer += $output->writeI32($this->restrictNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lat !== null) {
      $xfer += $output->writeFieldBegin('lat', TType::STRING, 3);
      $xfer += $output->writeString($this->lat);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lng !== null) {
      $xfer += $output->writeFieldBegin('lng', TType::STRING, 4);
      $xfer += $output->writeString($this->lng);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DriverItem {
  static $_TSPEC;

  /**
   * @var string
   */
  public $driverId = null;
  /**
   * @var int
   */
  public $carType = null;
  /**
   * @var string
   */
  public $carnumber = null;
  /**
   * @var int
   */
  public $has_certificate = null;
  /**
   * @var int
   */
  public $has_wrap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'driverId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'carType',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'carnumber',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'has_certificate',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'has_wrap',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['driverId'])) {
        $this->driverId = $vals['driverId'];
      }
      if (isset($vals['carType'])) {
        $this->carType = $vals['carType'];
      }
      if (isset($vals['carnumber'])) {
        $this->carnumber = $vals['carnumber'];
      }
      if (isset($vals['has_certificate'])) {
        $this->has_certificate = $vals['has_certificate'];
      }
      if (isset($vals['has_wrap'])) {
        $this->has_wrap = $vals['has_wrap'];
      }
    }
  }

  public function getName() {
    return 'DriverItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->driverId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->carType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->carnumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->has_certificate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->has_wrap);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DriverItem');
    if ($this->driverId !== null) {
      $xfer += $output->writeFieldBegin('driverId', TType::STRING, 1);
      $xfer += $output->writeString($this->driverId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->carType !== null) {
      $xfer += $output->writeFieldBegin('carType', TType::I32, 2);
      $xfer += $output->writeI32($this->carType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->carnumber !== null) {
      $xfer += $output->writeFieldBegin('carnumber', TType::STRING, 3);
      $xfer += $output->writeString($this->carnumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->has_certificate !== null) {
      $xfer += $output->writeFieldBegin('has_certificate', TType::I32, 4);
      $xfer += $output->writeI32($this->has_certificate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->has_wrap !== null) {
      $xfer += $output->writeFieldBegin('has_wrap', TType::I32, 5);
      $xfer += $output->writeI32($this->has_wrap);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InputDriverRec {
  static $_TSPEC;

  /**
   * @var \AddressItem[]
   */
  public $addressList = null;
  /**
   * @var \DriverItem[]
   */
  public $driverList = null;
  /**
   * @var int
   */
  public $totalBoxCount = null;
  /**
   * @var string
   */
  public $warehouse = null;
  /**
   * @var int
   */
  public $cage_car = null;
  /**
   * @var int
   */
  public $sentTime = null;
  /**
   * @var string
   */
  public $lineNumber = null;
  /**
   * @var string
   */
  public $boundLineDriverId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'addressList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\AddressItem',
            ),
          ),
        2 => array(
          'var' => 'driverList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\DriverItem',
            ),
          ),
        3 => array(
          'var' => 'totalBoxCount',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'warehouse',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'cage_car',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'sentTime',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'lineNumber',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'boundLineDriverId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['addressList'])) {
        $this->addressList = $vals['addressList'];
      }
      if (isset($vals['driverList'])) {
        $this->driverList = $vals['driverList'];
      }
      if (isset($vals['totalBoxCount'])) {
        $this->totalBoxCount = $vals['totalBoxCount'];
      }
      if (isset($vals['warehouse'])) {
        $this->warehouse = $vals['warehouse'];
      }
      if (isset($vals['cage_car'])) {
        $this->cage_car = $vals['cage_car'];
      }
      if (isset($vals['sentTime'])) {
        $this->sentTime = $vals['sentTime'];
      }
      if (isset($vals['lineNumber'])) {
        $this->lineNumber = $vals['lineNumber'];
      }
      if (isset($vals['boundLineDriverId'])) {
        $this->boundLineDriverId = $vals['boundLineDriverId'];
      }
    }
  }

  public function getName() {
    return 'InputDriverRec';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->addressList = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \AddressItem();
              $xfer += $elem5->read($input);
              $this->addressList []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->driverList = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $elem11 = new \DriverItem();
              $xfer += $elem11->read($input);
              $this->driverList []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->totalBoxCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->warehouse);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cage_car);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sentTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lineNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->boundLineDriverId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InputDriverRec');
    if ($this->addressList !== null) {
      if (!is_array($this->addressList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('addressList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->addressList));
        {
          foreach ($this->addressList as $iter12)
          {
            $xfer += $iter12->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->driverList !== null) {
      if (!is_array($this->driverList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('driverList', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->driverList));
        {
          foreach ($this->driverList as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalBoxCount !== null) {
      $xfer += $output->writeFieldBegin('totalBoxCount', TType::I32, 3);
      $xfer += $output->writeI32($this->totalBoxCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->warehouse !== null) {
      $xfer += $output->writeFieldBegin('warehouse', TType::STRING, 4);
      $xfer += $output->writeString($this->warehouse);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cage_car !== null) {
      $xfer += $output->writeFieldBegin('cage_car', TType::I32, 5);
      $xfer += $output->writeI32($this->cage_car);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sentTime !== null) {
      $xfer += $output->writeFieldBegin('sentTime', TType::I32, 6);
      $xfer += $output->writeI32($this->sentTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lineNumber !== null) {
      $xfer += $output->writeFieldBegin('lineNumber', TType::STRING, 7);
      $xfer += $output->writeString($this->lineNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->boundLineDriverId !== null) {
      $xfer += $output->writeFieldBegin('boundLineDriverId', TType::STRING, 8);
      $xfer += $output->writeString($this->boundLineDriverId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OutputDriverRec {
  static $_TSPEC;

  /**
   * @var \DriverItem[]
   */
  public $recommendDriverList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'recommendDriverList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\DriverItem',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['recommendDriverList'])) {
        $this->recommendDriverList = $vals['recommendDriverList'];
      }
    }
  }

  public function getName() {
    return 'OutputDriverRec';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->recommendDriverList = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new \DriverItem();
              $xfer += $elem19->read($input);
              $this->recommendDriverList []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OutputDriverRec');
    if ($this->recommendDriverList !== null) {
      if (!is_array($this->recommendDriverList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('recommendDriverList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->recommendDriverList));
        {
          foreach ($this->recommendDriverList as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


