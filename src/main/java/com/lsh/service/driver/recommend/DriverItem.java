/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lsh.service.driver.recommend;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-06")
public class DriverItem implements org.apache.thrift.TBase<DriverItem, DriverItem._Fields>, java.io.Serializable, Cloneable, Comparable<DriverItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DriverItem");

  private static final org.apache.thrift.protocol.TField DRIVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("driverId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CAR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("carType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CARNUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("carnumber", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField HAS_CERTIFICATE_FIELD_DESC = new org.apache.thrift.protocol.TField("has_certificate", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField HAS_WRAP_FIELD_DESC = new org.apache.thrift.protocol.TField("has_wrap", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DriverItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DriverItemTupleSchemeFactory());
  }

  public String driverId; // required
  public int carType; // optional
  public String carnumber; // optional
  public int has_certificate; // optional
  public int has_wrap; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DRIVER_ID((short)1, "driverId"),
    CAR_TYPE((short)2, "carType"),
    CARNUMBER((short)3, "carnumber"),
    HAS_CERTIFICATE((short)4, "has_certificate"),
    HAS_WRAP((short)5, "has_wrap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DRIVER_ID
          return DRIVER_ID;
        case 2: // CAR_TYPE
          return CAR_TYPE;
        case 3: // CARNUMBER
          return CARNUMBER;
        case 4: // HAS_CERTIFICATE
          return HAS_CERTIFICATE;
        case 5: // HAS_WRAP
          return HAS_WRAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CARTYPE_ISSET_ID = 0;
  private static final int __HAS_CERTIFICATE_ISSET_ID = 1;
  private static final int __HAS_WRAP_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CAR_TYPE,_Fields.CARNUMBER,_Fields.HAS_CERTIFICATE,_Fields.HAS_WRAP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DRIVER_ID, new org.apache.thrift.meta_data.FieldMetaData("driverId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CAR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("carType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CARNUMBER, new org.apache.thrift.meta_data.FieldMetaData("carnumber", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HAS_CERTIFICATE, new org.apache.thrift.meta_data.FieldMetaData("has_certificate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HAS_WRAP, new org.apache.thrift.meta_data.FieldMetaData("has_wrap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DriverItem.class, metaDataMap);
  }

  public DriverItem() {
  }

  public DriverItem(
    String driverId)
  {
    this();
    this.driverId = driverId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DriverItem(DriverItem other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDriverId()) {
      this.driverId = other.driverId;
    }
    this.carType = other.carType;
    if (other.isSetCarnumber()) {
      this.carnumber = other.carnumber;
    }
    this.has_certificate = other.has_certificate;
    this.has_wrap = other.has_wrap;
  }

  public DriverItem deepCopy() {
    return new DriverItem(this);
  }

  @Override
  public void clear() {
    this.driverId = null;
    setCarTypeIsSet(false);
    this.carType = 0;
    this.carnumber = null;
    setHas_certificateIsSet(false);
    this.has_certificate = 0;
    setHas_wrapIsSet(false);
    this.has_wrap = 0;
  }

  public String getDriverId() {
    return this.driverId;
  }

  public DriverItem setDriverId(String driverId) {
    this.driverId = driverId;
    return this;
  }

  public void unsetDriverId() {
    this.driverId = null;
  }

  /** Returns true if field driverId is set (has been assigned a value) and false otherwise */
  public boolean isSetDriverId() {
    return this.driverId != null;
  }

  public void setDriverIdIsSet(boolean value) {
    if (!value) {
      this.driverId = null;
    }
  }

  public int getCarType() {
    return this.carType;
  }

  public DriverItem setCarType(int carType) {
    this.carType = carType;
    setCarTypeIsSet(true);
    return this;
  }

  public void unsetCarType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CARTYPE_ISSET_ID);
  }

  /** Returns true if field carType is set (has been assigned a value) and false otherwise */
  public boolean isSetCarType() {
    return EncodingUtils.testBit(__isset_bitfield, __CARTYPE_ISSET_ID);
  }

  public void setCarTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CARTYPE_ISSET_ID, value);
  }

  public String getCarnumber() {
    return this.carnumber;
  }

  public DriverItem setCarnumber(String carnumber) {
    this.carnumber = carnumber;
    return this;
  }

  public void unsetCarnumber() {
    this.carnumber = null;
  }

  /** Returns true if field carnumber is set (has been assigned a value) and false otherwise */
  public boolean isSetCarnumber() {
    return this.carnumber != null;
  }

  public void setCarnumberIsSet(boolean value) {
    if (!value) {
      this.carnumber = null;
    }
  }

  public int getHas_certificate() {
    return this.has_certificate;
  }

  public DriverItem setHas_certificate(int has_certificate) {
    this.has_certificate = has_certificate;
    setHas_certificateIsSet(true);
    return this;
  }

  public void unsetHas_certificate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HAS_CERTIFICATE_ISSET_ID);
  }

  /** Returns true if field has_certificate is set (has been assigned a value) and false otherwise */
  public boolean isSetHas_certificate() {
    return EncodingUtils.testBit(__isset_bitfield, __HAS_CERTIFICATE_ISSET_ID);
  }

  public void setHas_certificateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HAS_CERTIFICATE_ISSET_ID, value);
  }

  public int getHas_wrap() {
    return this.has_wrap;
  }

  public DriverItem setHas_wrap(int has_wrap) {
    this.has_wrap = has_wrap;
    setHas_wrapIsSet(true);
    return this;
  }

  public void unsetHas_wrap() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HAS_WRAP_ISSET_ID);
  }

  /** Returns true if field has_wrap is set (has been assigned a value) and false otherwise */
  public boolean isSetHas_wrap() {
    return EncodingUtils.testBit(__isset_bitfield, __HAS_WRAP_ISSET_ID);
  }

  public void setHas_wrapIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HAS_WRAP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DRIVER_ID:
      if (value == null) {
        unsetDriverId();
      } else {
        setDriverId((String)value);
      }
      break;

    case CAR_TYPE:
      if (value == null) {
        unsetCarType();
      } else {
        setCarType((Integer)value);
      }
      break;

    case CARNUMBER:
      if (value == null) {
        unsetCarnumber();
      } else {
        setCarnumber((String)value);
      }
      break;

    case HAS_CERTIFICATE:
      if (value == null) {
        unsetHas_certificate();
      } else {
        setHas_certificate((Integer)value);
      }
      break;

    case HAS_WRAP:
      if (value == null) {
        unsetHas_wrap();
      } else {
        setHas_wrap((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DRIVER_ID:
      return getDriverId();

    case CAR_TYPE:
      return getCarType();

    case CARNUMBER:
      return getCarnumber();

    case HAS_CERTIFICATE:
      return getHas_certificate();

    case HAS_WRAP:
      return getHas_wrap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DRIVER_ID:
      return isSetDriverId();
    case CAR_TYPE:
      return isSetCarType();
    case CARNUMBER:
      return isSetCarnumber();
    case HAS_CERTIFICATE:
      return isSetHas_certificate();
    case HAS_WRAP:
      return isSetHas_wrap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DriverItem)
      return this.equals((DriverItem)that);
    return false;
  }

  public boolean equals(DriverItem that) {
    if (that == null)
      return false;

    boolean this_present_driverId = true && this.isSetDriverId();
    boolean that_present_driverId = true && that.isSetDriverId();
    if (this_present_driverId || that_present_driverId) {
      if (!(this_present_driverId && that_present_driverId))
        return false;
      if (!this.driverId.equals(that.driverId))
        return false;
    }

    boolean this_present_carType = true && this.isSetCarType();
    boolean that_present_carType = true && that.isSetCarType();
    if (this_present_carType || that_present_carType) {
      if (!(this_present_carType && that_present_carType))
        return false;
      if (this.carType != that.carType)
        return false;
    }

    boolean this_present_carnumber = true && this.isSetCarnumber();
    boolean that_present_carnumber = true && that.isSetCarnumber();
    if (this_present_carnumber || that_present_carnumber) {
      if (!(this_present_carnumber && that_present_carnumber))
        return false;
      if (!this.carnumber.equals(that.carnumber))
        return false;
    }

    boolean this_present_has_certificate = true && this.isSetHas_certificate();
    boolean that_present_has_certificate = true && that.isSetHas_certificate();
    if (this_present_has_certificate || that_present_has_certificate) {
      if (!(this_present_has_certificate && that_present_has_certificate))
        return false;
      if (this.has_certificate != that.has_certificate)
        return false;
    }

    boolean this_present_has_wrap = true && this.isSetHas_wrap();
    boolean that_present_has_wrap = true && that.isSetHas_wrap();
    if (this_present_has_wrap || that_present_has_wrap) {
      if (!(this_present_has_wrap && that_present_has_wrap))
        return false;
      if (this.has_wrap != that.has_wrap)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_driverId = true && (isSetDriverId());
    list.add(present_driverId);
    if (present_driverId)
      list.add(driverId);

    boolean present_carType = true && (isSetCarType());
    list.add(present_carType);
    if (present_carType)
      list.add(carType);

    boolean present_carnumber = true && (isSetCarnumber());
    list.add(present_carnumber);
    if (present_carnumber)
      list.add(carnumber);

    boolean present_has_certificate = true && (isSetHas_certificate());
    list.add(present_has_certificate);
    if (present_has_certificate)
      list.add(has_certificate);

    boolean present_has_wrap = true && (isSetHas_wrap());
    list.add(present_has_wrap);
    if (present_has_wrap)
      list.add(has_wrap);

    return list.hashCode();
  }

  @Override
  public int compareTo(DriverItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDriverId()).compareTo(other.isSetDriverId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDriverId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.driverId, other.driverId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarType()).compareTo(other.isSetCarType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carType, other.carType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarnumber()).compareTo(other.isSetCarnumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarnumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carnumber, other.carnumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHas_certificate()).compareTo(other.isSetHas_certificate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHas_certificate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.has_certificate, other.has_certificate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHas_wrap()).compareTo(other.isSetHas_wrap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHas_wrap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.has_wrap, other.has_wrap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DriverItem(");
    boolean first = true;

    sb.append("driverId:");
    if (this.driverId == null) {
      sb.append("null");
    } else {
      sb.append(this.driverId);
    }
    first = false;
    if (isSetCarType()) {
      if (!first) sb.append(", ");
      sb.append("carType:");
      sb.append(this.carType);
      first = false;
    }
    if (isSetCarnumber()) {
      if (!first) sb.append(", ");
      sb.append("carnumber:");
      if (this.carnumber == null) {
        sb.append("null");
      } else {
        sb.append(this.carnumber);
      }
      first = false;
    }
    if (isSetHas_certificate()) {
      if (!first) sb.append(", ");
      sb.append("has_certificate:");
      sb.append(this.has_certificate);
      first = false;
    }
    if (isSetHas_wrap()) {
      if (!first) sb.append(", ");
      sb.append("has_wrap:");
      sb.append(this.has_wrap);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (driverId == null) {
      throw new TProtocolException("Required field 'driverId' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DriverItemStandardSchemeFactory implements SchemeFactory {
    public DriverItemStandardScheme getScheme() {
      return new DriverItemStandardScheme();
    }
  }

  private static class DriverItemStandardScheme extends StandardScheme<DriverItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DriverItem struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DRIVER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.driverId = iprot.readString();
              struct.setDriverIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CAR_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.carType = iprot.readI32();
              struct.setCarTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CARNUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.carnumber = iprot.readString();
              struct.setCarnumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HAS_CERTIFICATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.has_certificate = iprot.readI32();
              struct.setHas_certificateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HAS_WRAP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.has_wrap = iprot.readI32();
              struct.setHas_wrapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DriverItem struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.driverId != null) {
        oprot.writeFieldBegin(DRIVER_ID_FIELD_DESC);
        oprot.writeString(struct.driverId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCarType()) {
        oprot.writeFieldBegin(CAR_TYPE_FIELD_DESC);
        oprot.writeI32(struct.carType);
        oprot.writeFieldEnd();
      }
      if (struct.carnumber != null) {
        if (struct.isSetCarnumber()) {
          oprot.writeFieldBegin(CARNUMBER_FIELD_DESC);
          oprot.writeString(struct.carnumber);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetHas_certificate()) {
        oprot.writeFieldBegin(HAS_CERTIFICATE_FIELD_DESC);
        oprot.writeI32(struct.has_certificate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHas_wrap()) {
        oprot.writeFieldBegin(HAS_WRAP_FIELD_DESC);
        oprot.writeI32(struct.has_wrap);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DriverItemTupleSchemeFactory implements SchemeFactory {
    public DriverItemTupleScheme getScheme() {
      return new DriverItemTupleScheme();
    }
  }

  private static class DriverItemTupleScheme extends TupleScheme<DriverItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DriverItem struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.driverId);
      BitSet optionals = new BitSet();
      if (struct.isSetCarType()) {
        optionals.set(0);
      }
      if (struct.isSetCarnumber()) {
        optionals.set(1);
      }
      if (struct.isSetHas_certificate()) {
        optionals.set(2);
      }
      if (struct.isSetHas_wrap()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCarType()) {
        oprot.writeI32(struct.carType);
      }
      if (struct.isSetCarnumber()) {
        oprot.writeString(struct.carnumber);
      }
      if (struct.isSetHas_certificate()) {
        oprot.writeI32(struct.has_certificate);
      }
      if (struct.isSetHas_wrap()) {
        oprot.writeI32(struct.has_wrap);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DriverItem struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.driverId = iprot.readString();
      struct.setDriverIdIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.carType = iprot.readI32();
        struct.setCarTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.carnumber = iprot.readString();
        struct.setCarnumberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.has_certificate = iprot.readI32();
        struct.setHas_certificateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.has_wrap = iprot.readI32();
        struct.setHas_wrapIsSet(true);
      }
    }
  }

}

